from datetime import datetime
from typing import Optional

from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from DB.tables.appointments import AppointmentsTable
from bot.bot_utils.filters import MasterFilter
from bot.bot_utils.msg_sender import get_media_from_photos, send_or_edit_message
from bot.keyboards import get_keyboard
from bot.states import MasterStates
from phrases import PHRASES_RU
from bot.keyboards.master import inline as inline_mkb
from utils import format_string


async def send_master_menu(user_id: int, message_id: Optional[int] = None):
    await send_or_edit_message(user_id, PHRASES_RU.answer.master.menu, inline_mkb.menu_master_keyboard(), message_id)

router = Router()
router.message.filter(MasterFilter())


@router.message(StateFilter(MasterStates.WAITING_FOR_SLOT))
async def _(message: Message, state: FSMContext):
    if message.text:
        try:
            slots = format_string.parse_slots_text(message.text)
            if not slots:
                await message.answer('‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: –≤—Ä–µ–º—è —Å–ª–æ—Ç–æ–≤ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ</b>')
                return
            confirmation_text = "üîç *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã:*\n\n"
            for i, (start, end) in enumerate(slots, 1):
                confirmation_text += (
                    f"{i}. *{start.strftime('%d.%m.%Y')}* "
                    f"{start.strftime('%H:%M')}-{end.strftime('%H:%M')}\n"
                )

            await state.update_data(parsed_slots=slots)

            await message.answer(
                confirmation_text,
                parse_mode="Markdown",
                reply_markup=inline_mkb.master_confirm_adding_slot()
            )

        except Exception as e:
            error_msg = (
                "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:*\n"
                f"`{str(e)}`\n\n"
                "*–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:*\n"
                "```\n—Å–µ–Ω—Ç—è–±—Ä—å\n"
                "1 - 14:30-16:30 17:30-19:30\n"
                "2 - 10:00 15:00\n```\n"
                "‚Ä¢ –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –º–µ—Å—è—Ü\n"
                "‚Ä¢ –ß–∏—Å–ª–æ - –≤—Ä–µ–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n"
                "‚Ä¢ –û–¥–Ω–æ –≤—Ä–µ–º—è = —Å–ª–æ—Ç –Ω–∞ 3 —á–∞—Å–∞"
            )
            await message.answer(error_msg, parse_mode="Markdown")
    else:
        await message.answer(PHRASES_RU.error.state.slot_not_text_type)


@router.message(StateFilter(MasterStates.WAITING_FOR_NEW_SERVICE))
async def _(message: Message, state: FSMContext):
    if message.text:
        try:

            service = format_string.parse_service_text(message.text)

            response = f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏\n\n"          # TODO
            response += f"‚ñ™ –ù–∞–∑–≤–∞–Ω–∏–µ: <i>{service.name}</i>\n"
            if service.description:
                response += f"‚ñ™ –û–ø–∏—Å–∞–Ω–∏–µ: <i>{service.description}</i>\n"
            if service.price:
                response += f"‚ñ™ –°—Ç–æ–∏–º–æ—Å—Ç—å: <i>{service.price} —Ä—É–±.</i>\n"
            if service.duration:
                response += f"‚ñ™ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <i>{service.duration} –º–∏–Ω.</i>"

            await state.update_data(parsed_service=service)
            await message.answer(response, reply_markup=inline_mkb.master_confirm_adding_service())

        except Exception as e:
            error_msg = (                                            # TODO
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏:\n"
                f"{str(e)}\n\n"
                "–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:\n"
                "<code>–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏\n"
                "–æ: –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
                "—Å: —Å—Ç–æ–∏–º–æ—Å—Ç—å (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
                "–¥: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</code>\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "<code>–ú–∞–Ω–∏–∫—é—Ä\n"
                "–æ: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä\n"
                "—Å: 1500\n"
                "–¥: 60</code>"
            )
            await message.answer(error_msg)
    else:
        await message.answer(PHRASES_RU.error.state.service_not_text_type)


@router.message(StateFilter(MasterStates.WAITING_FOR_EDIT_SERVICE))
async def _(message: Message, state: FSMContext):
    data = await state.get_data()
    service_id = data.get('service_id')
    if not service_id:
        await message.answer(PHRASES_RU.error.booking.try_again)
        await state.clear()
        return
    if message.text:
        try:
            service = format_string.parse_service_text(message.text)

            response = f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏\n\n"          # TODO
            response += f"‚ñ™ –ù–∞–∑–≤–∞–Ω–∏–µ: <i>{service.name}</i>\n"
            if service.description:
                response += f"‚ñ™ –û–ø–∏—Å–∞–Ω–∏–µ: <i>{service.description}</i>\n"
            if service.price:
                response += f"‚ñ™ –°—Ç–æ–∏–º–æ—Å—Ç—å: <i>{service.price} —Ä—É–±.</i>\n"
            if service.duration:
                response += f"‚ñ™ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <i>{service.duration} –º–∏–Ω.</i>"
            service.id = service_id
            await state.update_data(parsed_service=service)
            await message.answer(response, reply_markup=inline_mkb.master_confirm_edit_service(service_id))

        except Exception as e:
            error_msg = (                                            # TODO
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏:\n"   # TODO –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
                f"{str(e)}\n\n"
                "–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:\n"
                "<code>–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏\n"
                "–æ: –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
                "—Å: —Å—Ç–æ–∏–º–æ—Å—Ç—å (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
                "–¥: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</code>\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "<code>–ú–∞–Ω–∏–∫—é—Ä\n"
                "–æ: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä\n"
                "—Å: 1500\n"
                "–¥: 60</code>"
            )
            await message.answer(error_msg)
    else:
        await message.answer(PHRASES_RU.error.state.service_not_text_type)


@router.message(F.text == PHRASES_RU.button.master.clients_today)
async def _(message: Message):
    with AppointmentsTable() as app_db:
        apps = app_db.get_appointments_by_status_and_date(datetime.now())
        if apps:
            for app in apps:
                caption = format_string.master_sent_booking(app, PHRASES_RU.replace('title.booking', date=app.formatted_date))
                if app.photos:
                    await message.answer_media_group(media=get_media_from_photos(app.photos, caption=caption))
                else:
                    await message.answer(text=caption)
        else:
            await message.answer(text=PHRASES_RU.answer.no_apps_today, reply_markup=get_keyboard(message.from_user.id))


@router.message(F.text == PHRASES_RU.button.master.menu)
async def _(message: Message):
    await send_master_menu(message.from_user.id)
